# -*- coding: utf-8 -*-
"""Group-22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h70QCV4A5yoSNhJMTjFBnBnxG22X4tIF
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
import joblib

# loading the data from csv file to a Pandas DataFrame
calories = pd.rea d_csv("calories (1).csv")

# from google.colab import drive
# drive.mount('/content/drive')

# print the first 5 rows of the dataframe
calories.head()

exercise_data = pd.read_csv('exercise.csv')

exercise_data.head()

calories_data = pd.concat([exercise_data, calories['Calories']], axis=1)

calories_data.head()

# checking the number of rows and columns
calories_data.shape

# getting some informations about the data
calories_data.info()

# checking for missing values
calories_data.isnull().sum()

# get some statistical measures about the data
calories_data.describe()

sns.set()

# plotting the gender column in count plot
sns.countplot(calories_data['Gender'])

# finding the distribution of "Age" column
sns.histplot(calories_data['Age'])

# finding the distribution of "Height" column
sns.histplot(calories_data[['Height','Age']])

# finding the distribution of "Weight" column
sns.histplot(calories_data['Weight'])

# Convert 'Gender' column to numerical representation
calories_data['Gender'] = calories_data['Gender'].map({'male': 0, 'female': 1})

correlation = calories_data.corr()

# constructing a heatmap to understand the correlation

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

calories_data.replace({"Gender":{'male':0,'female':1}}, inplace=True)

calories_data.head()

X = calories_data.drop(columns=['User_ID','Calories'], axis=1)
Y = calories_data['Calories']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# loading the model
model = XGBRegressor()

# training the model with X_train
model.fit(X_train, Y_train)

test_data_prediction = model.predict(X_test)

print(test_data_prediction)
joblib.dump(model,"xgmodel.pkl")
mae = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("Mean Absolute Error = ", mae)
